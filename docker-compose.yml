services:
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"   # AMQP протокол порт
      - "15672:15672" # Management UI порт
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Auth БД
  auth-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=authdb
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d authdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Сервис
  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    container_name: auth-service
    restart: unless-stopped
    env_file:
      - ./auth-service/.env
    ports:
      - "8001:8001"
    depends_on:
      auth-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/auth/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Training БД
  training-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=trainingdb
    volumes:
      - training-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trainingdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Training Сервис
  training-service:
    build:
      context: .
      dockerfile: ./training-service/Dockerfile
    container_name: training-service
    restart: unless-stopped
    env_file:
      - ./training-service/.env
    ports:
      - "8002:8002"
    depends_on:
      training-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Reference БД
  reference-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=referencedb
    volumes:
      - reference-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d referencedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Reference Сервис
  reference-service:
    build:
      context: .
      dockerfile: ./reference-service/Dockerfile
    container_name: reference-service
    restart: unless-stopped
    env_file:
      - ./reference-service/.env
    ports:
      - "8003:8003"
    depends_on:
      reference-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Notes БД
  notes-db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=notesdb
    volumes:
      - notes-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d notesdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Notes Сервис
  notes-service:
    build:
      context: .
      dockerfile: ./notes-service/Dockerfile
    container_name: notes-service
    restart: unless-stopped
    env_file:
      - ./notes-service/.env
    ports:
      - "8004:8004"
    depends_on:
      notes-db:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      auth-service:
        condition: service_healthy
      training-service:
        condition: service_healthy
      reference-service:
        condition: service_healthy
      notes-service:
        condition: service_healthy
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SERVER_ROOT_URL=http://localhost/grafana
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth-db-data:
  training-db-data:
  reference-db-data:
  notes-db-data:
  grafana-data:
  rabbitmq-data:
