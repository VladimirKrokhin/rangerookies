name: Автоматическое развертывание

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    name: Развертывание
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Получение кода
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Получаем полную историю коммитов

      - name: Проверка текущего коммита
        run: |
          echo "Ветка: main"
          echo "Коммит: $(git rev-parse HEAD)"
          echo "Сообщение: $(git log -1 --pretty=format:'%s')"
          echo "Автор: $(git log -1 --pretty=format:'%an')"
          echo "Дата: $(git log -1 --pretty=format:'%cd')"

      - name: Подготовка директории и синхронизация через git
        run: |
          sudo mkdir -p /var/www/apps/rangerookies
          sudo chown -R $USER:$USER /var/www/apps/rangerookies
          
          # Переходим в директорию приложения
          cd /var/www/apps/rangerookies
          
          # Если git репозиторий уже существует, обновляем его
          if [ -d ".git" ]; then
            echo "Обновление существующего git репозитория..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd
          else
            echo "Клонирование git репозитория..."
            git clone https://github.com/${{ github.repository }}.git .
            git checkout main
          fi
          
          echo "Синхронизация завершена"

      - name: Проверка синхронизации кода
        run: |
          cd /var/www/apps/rangerookies
          echo "Проверка синхронизации кода..."
          echo "Текущий коммит на сервере: $(git rev-parse HEAD)"
          echo "Ветка: $(git branch --show-current)"
          echo "Файлы в директории:"
          ls -la
          echo "Docker файлы:"
          ls -la */Dockerfile

      - name: Создание .env файлов из секретов
        run: |
          cd /var/www/apps/rangerookies
          
          # Создаем .env файлы из GitHub Secrets
          echo "${{ secrets.AUTH_ENV }}" > auth-service/.env
          echo "${{ secrets.TRAINING_ENV }}" > training-service/.env
          echo "${{ secrets.REFERENCE_ENV }}" > reference-service/.env
          echo "${{ secrets.NOTES_ENV }}" > notes-service/.env

      - name: Очистка Docker
        run: |
          cd /var/www/apps/rangerookies
          docker-compose down -v --remove-orphans || true
          docker system prune -a -f --volumes || true

      - name: Принудительная пересборка Docker-образов
        run: |
          cd /var/www/apps/rangerookies
          echo "Принудительная пересборка образов..."
          docker-compose build --no-cache --pull
        working-directory: /var/www/apps/rangerookies

      - name: Запуск сервисов
        run: |
          cd /var/www/apps/rangerookies
          docker-compose up -d
        working-directory: /var/www/apps/rangerookies

      - name: Ожидание готовности сервисов
        run: |
          cd /var/www/apps/rangerookies
          echo "Ожидание готовности сервисов..."
          sleep 60
          
          # Проверяем статус всех сервисов
          docker-compose ps
          
          # Проверяем health endpoints
          echo "Проверка health endpoints..."
          curl -f http://localhost:8080/api/health || echo "API Gateway health check failed"
          curl -f http://localhost:8001/api/health || echo "Auth service health check failed"
          curl -f http://localhost:8002/api/health || echo "Training service health check failed"
          curl -f http://localhost:8003/api/health || echo "Reference service health check failed"
          curl -f http://localhost:8004/api/health || echo "Notes service health check failed"
        working-directory: /var/www/apps/rangerookies 